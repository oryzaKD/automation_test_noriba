name: CI - WDIO Appium Android

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'
  pull_request:
  schedule:
    - cron: '0 18 * * *' # 01:00 WIB (UTC+7) â‰ˆ 18:00 UTC previous day
  workflow_dispatch:

jobs:
  android-e2e:
    name: Android E2E
    runs-on: macos-14
    timeout-minutes: 60

    env:
      NODE_ENV: test
      # Email envs are loaded by wdio via config/email.env

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create config/email.env from secrets (non-PR)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          if [ -n "${{ secrets.GMAIL_CLIENT_ID }}" ] && [ -n "${{ secrets.GMAIL_CLIENT_SECRET }}" ] && [ -n "${{ secrets.GMAIL_REFRESH_TOKEN }}" ] && [ -n "${{ secrets.GMAIL_USER }}" ]; then
            mkdir -p config
            {
              echo "GMAIL_CLIENT_ID=${{ secrets.GMAIL_CLIENT_ID }}"
              echo "GMAIL_CLIENT_SECRET=${{ secrets.GMAIL_CLIENT_SECRET }}"
              echo "GMAIL_REFRESH_TOKEN=${{ secrets.GMAIL_REFRESH_TOKEN }}"
              echo "GMAIL_USER=${{ secrets.GMAIL_USER }}"
            } > config/email.env
            echo "email.env created from secrets."
          else
            echo "Secrets incomplete; skipping email.env creation. Email-dependent specs will be excluded."
          fi

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK tools
        uses: android-actions/setup-android@v3

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      - name: Install required Android packages
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "emulator" "system-images;android-30;google_apis;x86_64"

      - name: Create and start Android emulator
        run: |
          avdmanager create avd -n test -k "system-images;android-30;google_apis;x86_64" -d pixel
          nohup $ANDROID_HOME/emulator/emulator -avd test -no-snapshot -no-audio -no-boot-anim -gpu swiftshader_indirect -netfast -no-window > emulator.log 2>&1 &
          adb wait-for-device
          # Wait for boot completion
          boot_completed="0"
          attempt=0
          until [ "$boot_completed" = "1" ] || [ $attempt -ge 60 ]; do
            sleep 5
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            attempt=$((attempt+1))
          done
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

      - name: Verify emulator is running
        run: adb devices -l

      - name: Install Appium and drivers
        run: |
          npm i -g appium@^3.0.2
          appium driver install uiautomator2

      - name: Start Appium server
        run: nohup appium -p 4723 > appium.log 2>&1 &

      - name: Run tests
        run: |
          if [ -n "${{ secrets.GMAIL_CLIENT_ID }}" ] && [ -n "${{ secrets.GMAIL_CLIENT_SECRET }}" ] && [ -n "${{ secrets.GMAIL_REFRESH_TOKEN }}" ] && [ -n "${{ secrets.GMAIL_USER }}" ]; then
            npm test
          else
            npx wdio run ./wdio.conf.ts --exclude test/specs/**/*email*.ts
          fi

      - name: Upload logs and artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            appium.log
            emulator.log
            ./wdio-*.log


  deploy-staging:
    name: Deploy Staging
    needs: android-e2e
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Placeholder deploy to staging
        run: |
          echo "Staging deploy placeholder. Replace with real deploy steps (SSH/rsync/k8s)."
          echo "Commit: $GITHUB_SHA"

  deploy-production:
    name: Deploy Production (Release)
    needs: android-e2e
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: logs
          path: release-artifacts

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

